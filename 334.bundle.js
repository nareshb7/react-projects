"use strict";(self.webpackChunkreact_beginner_projects_1=self.webpackChunkreact_beginner_projects_1||[]).push([[334],{7334:(e,t,n)=>{n.r(t),n.d(t,{default:()=>N});var a=n(6540),i=n(5072),l=n.n(i),r=n(7825),s=n.n(r),o=n(7659),c=n.n(o),d=n(5056),m=n.n(d),f=n(540),h=n.n(f),u=n(1113),p=n.n(u),b=n(4005),x={};function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}x.styleTagTransform=p(),x.setAttributes=m(),x.insert=c().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=h(),l()(b.A,x),b.A&&b.A.locals&&b.A.locals;const g=function(e){var t=e.width,n=e.height,i=e.backgroundColor,l=void 0===i?"#000":i,r=e.children;return a.createElement("div",{className:"card",style:{width:t,height:n,backgroundColor:l}},r)},v=function(e){var t,n,i,l,r,s=e.width,o=e.height;return(l=(0,a.useState)({width:window.innerWidth,height:window.innerHeight}),r=2,t=function(e){if(Array.isArray(e))return e}(l)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,i,l,r,s=[],o=!0,c=!1;try{if(l=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;o=!1}else for(;!(o=(a=l.call(n)).done)&&(s.push(a.value),s.length!==t);o=!0);}catch(e){c=!0,i=e}finally{try{if(!o&&null!=n.return&&(r=n.return(),Object(r)!==r))return}finally{if(c)throw i}}return s}}(l,r)||function(e,t){if(e){if("string"==typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?w(e,t):void 0}}(l,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),n=t[0],i=t[1],(0,a.useEffect)((function(){var e=function(){i({width:window.innerWidth,height:window.innerHeight})};return window.addEventListener("resize",e),function(){window.removeEventListener("resize",e)}}),[]),n).width,a.createElement("div",{className:"container"},Array(5).fill(1).map((function(e,t){return a.createElement(g,{key:t,width:s,height:o},s," X ",o)})))},y=function(){return a.createElement("div",{className:"boxmodal-wrapper",style:{minHeight:"100px"}},a.createElement("div",{style:{color:"#000",margin:"10px",padding:"10px",border:"4px solid #8f3e43"}},a.createElement("div",{className:"text-center font-bold"}," BOX MODEL"),a.createElement("div",{className:"font-semibold"},"The CSS box model is a fundamental concept in web design and layout that defines how elements are displayed and interact with each other on a web page. It consists of several components:"),a.createElement("div",null,a.createElement("span",{className:"font-bold"},"1. Content Box:")," This is where the content of the element (text, images, etc.) is displayed. Its dimensions are defined by width and height."),a.createElement("div",null,a.createElement("span",{className:"font-bold"},"2. Padding Box:")," This is the space between the content and the border. Padding adds space inside the element, around the content box. It can be set using padding."),a.createElement("div",null,a.createElement("span",{className:"font-bold"},"3. Border Box:")," This is the border that surrounds the padding (if any) and the content. The border can be styled, colored, and its width can be defined using border.")," ",a.createElement("div",null,a.createElement("span",{className:"font-bold"},"4. Margin Box:")," This is the space outside the border. Margins create space between the element and other elements on the page. It can be set using margin.")))},E=function(){return a.createElement("div",null,a.createElement("div",{className:"font-bold text-center"},"FLEXBOX MODAL "),a.createElement("div",null,"The Flexbox model in CSS (short for Flexible Box Layout) is a layout module designed to make it easier to design flexible and responsive layout structures without using floats or positioning. Flexbox simplifies the process of aligning and distributing space among items in a container, even when their sizes are dynamic or unknown."),a.createElement("div",{className:"font-semibold text-center"},"Key Concepts of Flexbox"),a.createElement("ol",null,a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"Flex Container:")," The parent element that contains flex items. It is defined by setting the `display` property to `flex` or `inline-flex`."),a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"Flex Items:")," The children of the flex container. They are arranged inside the flex container according to the rules defined by Flexbox properties.")),a.createElement("div",{className:"font-semibold text-center"},"Flex Container Properties"),a.createElement("div",null,a.createElement("span",{className:"font-semibold"},"1. display:")," Defines the element as a flex container. - `display: flex;` - `display: inline-flex;`"),a.createElement("div",null,a.createElement("span",{className:"font-semibold"},"2. flex-direction:")," Defines the direction in which flex items are placed in the flex container. - `row` (default): left to right in a horizontal line. - `row-reverse`: right to left in a horizontal line. - `column`: top to bottom in a vertical line. - `column-reverse`: bottom to top in a vertical line."),a.createElement("div",null,a.createElement("span",{className:"font-semibold"},"3. flex-wrap:")," Specifies whether flex items should wrap or not. - `nowrap` (default): all flex items will be on one line. - `wrap`: flex items will wrap onto multiple lines. - `wrap-reverse`: flex items will wrap onto multiple lines in reverse order."),a.createElement("div",null,a.createElement("span",{className:"font-semibold"},"4. justify-content:")," Defines the alignment of flex items along the main axis. - `flex-start` (default): items are packed toward the start of the flex-direction. - `flex-end`: items are packed toward the end of the flex-direction. - `center`: items are centered along the main axis. - `space-between`: items are evenly distributed with space between them. - `space-around`: items are evenly distributed with space around them. - `space-evenly`: items are evenly distributed with equal space around them."),a.createElement("div",null,a.createElement("span",{className:"font-semibold"},"5. align-items:")," Defines the default alignment for all flex items along the cross axis. - `stretch` (default): items are stretched to fill the container. - `flex-start`: items are aligned toward the start of the cross axis. - `flex-end`: items are aligned toward the end of the cross axis. - `center`: items are centered along the cross axis. - `baseline`: items are aligned along their baselines."),a.createElement("div",null,a.createElement("span",{className:"font-semibold"},"6. align-content:")," Aligns flex lines within the flex container when there is extra space on the cross axis. - `stretch` (default): lines stretch to take up the remaining space. - `flex-start`: lines are packed toward the start of the cross axis. - `flex-end`: lines are packed toward the end of the cross axis. - `center`: lines are centered along the cross axis. - `space-between`: lines are evenly distributed with space between them. - `space-around`: lines are evenly distributed with space around them. - `space-evenly`: lines are evenly distributed with equal space around them."),a.createElement("div",{className:"font-semibold text-center"},"Flex Item Properties"),a.createElement("ol",null,a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"1. order: ")," Specifies the order in which a flex item appears within the flex container. Default is `0`."),a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"2. flex-grow:")," Defines the ability for a flex item to grow if necessary. Default is `0`."),a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"3. flex-shrink:")," Defines the ability for a flex item to shrink if necessary. Default is `1`."),a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"4. flex-basis:")," Specifies the initial size of a flex item before any available space is distributed. Default is `auto`."),a.createElement("li",null,a.createElement("span",{className:"font-semibold"},"5. align-self:")," Allows the default alignment (or the one specified by `align-items`) to be overridden for individual flex items. - `auto` (default): inherits the value from the parent. - `flex-start` - `flex-end` - `center` - `baseline` - `stretch`")))},N=function(){return a.createElement("div",{className:"responsive-layout-wrapper"},a.createElement("div",{className:"header-title"},"Responsive Layout"),a.createElement(y,null),a.createElement(E,null),a.createElement(v,{width:300,height:300}))}},4005:(e,t,n)=>{n.d(t,{A:()=>s});var a=n(1601),i=n.n(a),l=n(6314),r=n.n(l)()(i());r.push([e.id,".responsive-layout-wrapper{background-color:#888;margin-block:10px;min-height:500px}.responsive-layout-wrapper .container{display:flex;flex-wrap:wrap}.responsive-layout-wrapper .container .card{display:flex;flex:1 1 auto;justify-content:center;align-items:center;color:#fff;margin:10px}",""]);const s=r}}]);